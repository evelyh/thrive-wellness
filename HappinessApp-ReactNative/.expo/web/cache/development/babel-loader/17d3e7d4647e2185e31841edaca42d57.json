{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react-native-web/dist/index\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nfunction sendPushNotification(expoPushToken) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: 'Original Title',\n            body: 'And here is the body!',\n            data: {\n              data: 'goes here'\n            }\n          };\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context3.next = 21;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context3.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context3.next = 12;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context3.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context3.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context3.abrupt(\"return\");\n\n        case 15:\n          _context3.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context3.sent.data;\n          console.log(token);\n          _context3.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context3.abrupt(\"return\", token);\n\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/FROG/csc301/team-project-4-bellwoods-strategic-capital/HappinessApp-ReactNative/contexts/networkingHelpers/notifications.js"],"names":["React","Constants","Notifications","Permissions","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","sendPushNotification","expoPushToken","message","to","sound","title","body","data","fetch","method","headers","Accept","JSON","stringify","registerForPushNotificationsAsync","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","token","console","log","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":";OAAOA,K;AACP,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAO,KAAKC,aAAZ,MAA+B,oBAA/B;AACA,OAAO,KAAKC,WAAZ,MAA6B,kBAA7B;AAEAD,aAAa,CAACE,sBAAd,CAAqC;AACnCC,EAAAA,kBAAkB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA,6CAAa;AAC/BC,cAAAA,eAAe,EAAE,IADc;AAE/BC,cAAAA,eAAe,EAAE,KAFc;AAG/BC,cAAAA,cAAc,EAAE;AAHe,aAAb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADe,CAArC;;AAUA,SAAeC,oBAAf,CAAoCC,aAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,UAAAA,OADR,GACkB;AACdC,YAAAA,EAAE,EAAEF,aADU;AAEdG,YAAAA,KAAK,EAAE,SAFO;AAGdC,YAAAA,KAAK,EAAE,gBAHO;AAIdC,YAAAA,IAAI,EAAE,uBAJQ;AAKdC,YAAAA,IAAI,EAAE;AAAEA,cAAAA,IAAI,EAAE;AAAR;AALQ,WADlB;AAAA;AAAA,2CASQC,KAAK,CAAC,sCAAD,EAAyC;AAClDC,YAAAA,MAAM,EAAE,MAD0C;AAElDC,YAAAA,OAAO,EAAE;AACPC,cAAAA,MAAM,EAAE,kBADD;AAEP,iCAAmB,eAFZ;AAGP,8BAAgB;AAHT,aAFyC;AAOlDL,YAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAeX,OAAf;AAP4C,WAAzC,CATb;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,OAAO,SAAeY,iCAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,eAEDtB,SAAS,CAACuB,QAFT;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGsCrB,WAAW,CAACsB,QAAZ,CAAqBtB,WAAW,CAACuB,aAAjC,CAHtC;;AAAA;AAAA;AAGaC,UAAAA,cAHb,yBAGKC,MAHL;AAICC,UAAAA,WAJD,GAIeF,cAJf;;AAAA,gBAKCA,cAAc,KAAK,SALpB;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAMwBxB,WAAW,CAAC2B,QAAZ,CAAqB3B,WAAW,CAACuB,aAAjC,CANxB;;AAAA;AAAA;AAMOE,UAAAA,MANP,yBAMOA,MANP;AAODC,UAAAA,WAAW,GAAGD,MAAd;;AAPC;AAAA,gBASCC,WAAW,KAAK,SATjB;AAAA;AAAA;AAAA;;AAUDE,UAAAA,KAAK,CAAC,iDAAD,CAAL;AAVC;;AAAA;AAAA;AAAA,2CAaY7B,aAAa,CAAC8B,qBAAd,EAbZ;;AAAA;AAaHC,UAAAA,KAbG,kBAamDjB,IAbnD;AAcHkB,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAdG;AAAA;;AAAA;AAgBHF,UAAAA,KAAK,CAAC,iDAAD,CAAL;;AAhBG;AAmBL,cAAIK,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7BnC,YAAAA,aAAa,CAACoC,2BAAd,CAA0C,SAA1C,EAAqD;AACnDC,cAAAA,IAAI,EAAE,SAD6C;AAEnDC,cAAAA,UAAU,EAAEtC,aAAa,CAACuC,iBAAd,CAAgCC,GAFO;AAGnDC,cAAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,GAAT,EAAc,GAAd,CAHiC;AAInDC,cAAAA,UAAU,EAAE;AAJuC,aAArD;AAMD;;AA1BI,4CA4BEX,KA5BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import React from 'react-native'\nimport Constants from 'expo-constants'\nimport * as Notifications from 'expo-notifications'\nimport * as Permissions from 'expo-permissions'\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: false,\n    shouldSetBadge: false,\n  }),\n});\n\n// Can use this function below, OR use Expo's Push Notification\n// Tool-> https://expo.io/notifications\nasync function sendPushNotification(expoPushToken) {\n  const message = {\n    to: expoPushToken,\n    sound: 'default',\n    title: 'Original Title',\n    body: 'And here is the body!',\n    data: { data: 'goes here' },\n  };\n\n  await fetch('https://exp.host/--/api/v2/push/send', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Accept-encoding': 'gzip, deflate',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(message),\n  });\n}\n\nexport async function registerForPushNotificationsAsync() {\n  let token;\n  if (Constants.isDevice) {\n    const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\n    let finalStatus = existingStatus;\n    if (existingStatus !== 'granted') {\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\n      finalStatus = status;\n    }\n    if (finalStatus !== 'granted') {\n      alert('Failed to get push token for push notification!');\n      return;\n    }\n    token = (await Notifications.getExpoPushTokenAsync()).data;\n    console.log(token);\n  } else {\n    alert('Must use physical device for Push Notifications');\n  }\n\n  if (Platform.OS === 'android') {\n    Notifications.setNotificationChannelAsync('default', {\n      name: 'default',\n      importance: Notifications.AndroidImportance.MAX,\n      vibrationPattern: [0, 250, 250, 250],\n      lightColor: '#FF231F7C',\n    });\n  }\n\n  return token;\n}"]},"metadata":{},"sourceType":"module"}